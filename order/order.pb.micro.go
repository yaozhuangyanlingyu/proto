// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: proto/order/order.proto

package order

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "github.com/micro/go-micro/v2/api"
	client "github.com/micro/go-micro/v2/client"
	server "github.com/micro/go-micro/v2/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for OrderService service

func NewOrderServiceEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for OrderService service

type OrderService interface {
	// CreateExternalOrder 创建外部订单
	CreateExternalOrder(ctx context.Context, in *CreateExternalOrderRequest, opts ...client.CallOption) (*CreateExternalOrderResponse, error)
	// CancelOrder 取消订单（内部订单、外部订单）
	CancelOrder(ctx context.Context, in *CancelOrderRequest, opts ...client.CallOption) (*CancelOrderResponse, error)
	// OrderSearch 订单搜索
	OrderSearch(ctx context.Context, in *OrderSearchRequest, opts ...client.CallOption) (*OrderSearchResponse, error)
	// 获取佣金劵过期时间
	SvoucherExpireTime(ctx context.Context, in *SvoucherExpireTimeRequest, opts ...client.CallOption) (*SvoucherExpireTimeResponse, error)
	// 计算结算佣金
	CalcSettlePrice(ctx context.Context, in *CalcSettlePriceRequest, opts ...client.CallOption) (*CalcSettlePriceResponse, error)
	// Mq消息回调接口
	MqNotice(ctx context.Context, in *MqNoticeRequest, opts ...client.CallOption) (*MqNoticeResponse, error)
	// 根据条件，获取佣金模板数据
	GetCommissionTpl(ctx context.Context, in *GetCommissionTplRequest, opts ...client.CallOption) (*GetCommissionTplResponse, error)
	// 根据商品ID，获取对应的佣金模板
	GetCommissionTplByPid(ctx context.Context, in *GetCommissionTplByPidRequest, opts ...client.CallOption) (*GetCommissionTplByPidResponse, error)
}

type orderService struct {
	c    client.Client
	name string
}

func NewOrderService(name string, c client.Client) OrderService {
	return &orderService{
		c:    c,
		name: name,
	}
}

func (c *orderService) CreateExternalOrder(ctx context.Context, in *CreateExternalOrderRequest, opts ...client.CallOption) (*CreateExternalOrderResponse, error) {
	req := c.c.NewRequest(c.name, "OrderService.CreateExternalOrder", in)
	out := new(CreateExternalOrderResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderService) CancelOrder(ctx context.Context, in *CancelOrderRequest, opts ...client.CallOption) (*CancelOrderResponse, error) {
	req := c.c.NewRequest(c.name, "OrderService.CancelOrder", in)
	out := new(CancelOrderResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderService) OrderSearch(ctx context.Context, in *OrderSearchRequest, opts ...client.CallOption) (*OrderSearchResponse, error) {
	req := c.c.NewRequest(c.name, "OrderService.OrderSearch", in)
	out := new(OrderSearchResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderService) SvoucherExpireTime(ctx context.Context, in *SvoucherExpireTimeRequest, opts ...client.CallOption) (*SvoucherExpireTimeResponse, error) {
	req := c.c.NewRequest(c.name, "OrderService.SvoucherExpireTime", in)
	out := new(SvoucherExpireTimeResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderService) CalcSettlePrice(ctx context.Context, in *CalcSettlePriceRequest, opts ...client.CallOption) (*CalcSettlePriceResponse, error) {
	req := c.c.NewRequest(c.name, "OrderService.CalcSettlePrice", in)
	out := new(CalcSettlePriceResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderService) MqNotice(ctx context.Context, in *MqNoticeRequest, opts ...client.CallOption) (*MqNoticeResponse, error) {
	req := c.c.NewRequest(c.name, "OrderService.MqNotice", in)
	out := new(MqNoticeResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderService) GetCommissionTpl(ctx context.Context, in *GetCommissionTplRequest, opts ...client.CallOption) (*GetCommissionTplResponse, error) {
	req := c.c.NewRequest(c.name, "OrderService.GetCommissionTpl", in)
	out := new(GetCommissionTplResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderService) GetCommissionTplByPid(ctx context.Context, in *GetCommissionTplByPidRequest, opts ...client.CallOption) (*GetCommissionTplByPidResponse, error) {
	req := c.c.NewRequest(c.name, "OrderService.GetCommissionTplByPid", in)
	out := new(GetCommissionTplByPidResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for OrderService service

type OrderServiceHandler interface {
	// CreateExternalOrder 创建外部订单
	CreateExternalOrder(context.Context, *CreateExternalOrderRequest, *CreateExternalOrderResponse) error
	// CancelOrder 取消订单（内部订单、外部订单）
	CancelOrder(context.Context, *CancelOrderRequest, *CancelOrderResponse) error
	// OrderSearch 订单搜索
	OrderSearch(context.Context, *OrderSearchRequest, *OrderSearchResponse) error
	// 获取佣金劵过期时间
	SvoucherExpireTime(context.Context, *SvoucherExpireTimeRequest, *SvoucherExpireTimeResponse) error
	// 计算结算佣金
	CalcSettlePrice(context.Context, *CalcSettlePriceRequest, *CalcSettlePriceResponse) error
	// Mq消息回调接口
	MqNotice(context.Context, *MqNoticeRequest, *MqNoticeResponse) error
	// 根据条件，获取佣金模板数据
	GetCommissionTpl(context.Context, *GetCommissionTplRequest, *GetCommissionTplResponse) error
	// 根据商品ID，获取对应的佣金模板
	GetCommissionTplByPid(context.Context, *GetCommissionTplByPidRequest, *GetCommissionTplByPidResponse) error
}

func RegisterOrderServiceHandler(s server.Server, hdlr OrderServiceHandler, opts ...server.HandlerOption) error {
	type orderService interface {
		CreateExternalOrder(ctx context.Context, in *CreateExternalOrderRequest, out *CreateExternalOrderResponse) error
		CancelOrder(ctx context.Context, in *CancelOrderRequest, out *CancelOrderResponse) error
		OrderSearch(ctx context.Context, in *OrderSearchRequest, out *OrderSearchResponse) error
		SvoucherExpireTime(ctx context.Context, in *SvoucherExpireTimeRequest, out *SvoucherExpireTimeResponse) error
		CalcSettlePrice(ctx context.Context, in *CalcSettlePriceRequest, out *CalcSettlePriceResponse) error
		MqNotice(ctx context.Context, in *MqNoticeRequest, out *MqNoticeResponse) error
		GetCommissionTpl(ctx context.Context, in *GetCommissionTplRequest, out *GetCommissionTplResponse) error
		GetCommissionTplByPid(ctx context.Context, in *GetCommissionTplByPidRequest, out *GetCommissionTplByPidResponse) error
	}
	type OrderService struct {
		orderService
	}
	h := &orderServiceHandler{hdlr}
	return s.Handle(s.NewHandler(&OrderService{h}, opts...))
}

type orderServiceHandler struct {
	OrderServiceHandler
}

func (h *orderServiceHandler) CreateExternalOrder(ctx context.Context, in *CreateExternalOrderRequest, out *CreateExternalOrderResponse) error {
	return h.OrderServiceHandler.CreateExternalOrder(ctx, in, out)
}

func (h *orderServiceHandler) CancelOrder(ctx context.Context, in *CancelOrderRequest, out *CancelOrderResponse) error {
	return h.OrderServiceHandler.CancelOrder(ctx, in, out)
}

func (h *orderServiceHandler) OrderSearch(ctx context.Context, in *OrderSearchRequest, out *OrderSearchResponse) error {
	return h.OrderServiceHandler.OrderSearch(ctx, in, out)
}

func (h *orderServiceHandler) SvoucherExpireTime(ctx context.Context, in *SvoucherExpireTimeRequest, out *SvoucherExpireTimeResponse) error {
	return h.OrderServiceHandler.SvoucherExpireTime(ctx, in, out)
}

func (h *orderServiceHandler) CalcSettlePrice(ctx context.Context, in *CalcSettlePriceRequest, out *CalcSettlePriceResponse) error {
	return h.OrderServiceHandler.CalcSettlePrice(ctx, in, out)
}

func (h *orderServiceHandler) MqNotice(ctx context.Context, in *MqNoticeRequest, out *MqNoticeResponse) error {
	return h.OrderServiceHandler.MqNotice(ctx, in, out)
}

func (h *orderServiceHandler) GetCommissionTpl(ctx context.Context, in *GetCommissionTplRequest, out *GetCommissionTplResponse) error {
	return h.OrderServiceHandler.GetCommissionTpl(ctx, in, out)
}

func (h *orderServiceHandler) GetCommissionTplByPid(ctx context.Context, in *GetCommissionTplByPidRequest, out *GetCommissionTplByPidResponse) error {
	return h.OrderServiceHandler.GetCommissionTplByPid(ctx, in, out)
}
